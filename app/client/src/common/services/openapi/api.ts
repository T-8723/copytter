/* tslint:disable */
/* eslint-disable */
/**
 * 
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import { Configuration } from './configuration';
import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface Entry
 */
export interface Entry {
    /**
     * 
     * @type {number}
     * @memberof Entry
     */
    'id': number;
    /**
     * 
     * @type {Profile}
     * @memberof Entry
     */
    'author': Profile;
    /**
     * 
     * @type {EntryStatusEnum}
     * @memberof Entry
     */
    'status'?: EntryStatusEnum;
    /**
     * 
     * @type {string}
     * @memberof Entry
     */
    'body': string;
    /**
     * 
     * @type {string}
     * @memberof Entry
     */
    'created_at': string;
    /**
     * 
     * @type {number}
     * @memberof Entry
     */
    'like_count'?: number;
    /**
     * 
     * @type {boolean}
     * @memberof Entry
     */
    'media_close'?: boolean;
    /**
     * 
     * @type {number}
     * @memberof Entry
     */
    'relation_cont'?: number;
    /**
     * 
     * @type {string}
     * @memberof Entry
     */
    'relation_id'?: string;
    /**
     * 
     * @type {string}
     * @memberof Entry
     */
    'updated_at': string;
}
/**
 * 
 * @export
 * @enum {string}
 */

export enum EntryStatusEnum {
    Draft = 'draft',
    Public = 'public',
    Close = 'close',
    Machine = 'machine'
}

/**
 * 
 * @export
 * @interface Follow
 */
export interface Follow {
    /**
     * 
     * @type {number}
     * @memberof Follow
     */
    'id': number;
    /**
     * 
     * @type {number}
     * @memberof Follow
     */
    'follow_user': number;
    /**
     * 
     * @type {number}
     * @memberof Follow
     */
    'user': number;
}
/**
 * Serializer class used to validate a username and password.  \'username\' is identified by the custom UserModel.USERNAME_FIELD.  Returns a JSON Web Token that can be used to authenticate later calls.
 * @export
 * @interface JSONWebToken
 */
export interface JSONWebToken {
    /**
     * 
     * @type {string}
     * @memberof JSONWebToken
     */
    'username': string;
    /**
     * 
     * @type {string}
     * @memberof JSONWebToken
     */
    'password': string;
}
/**
 * 
 * @export
 * @interface PatchedUpdateSelfProfile
 */
export interface PatchedUpdateSelfProfile {
    /**
     * 
     * @type {string}
     * @memberof PatchedUpdateSelfProfile
     */
    'gender'?: string;
    /**
     * 
     * @type {string}
     * @memberof PatchedUpdateSelfProfile
     */
    'birth_date'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof PatchedUpdateSelfProfile
     */
    'location'?: string;
    /**
     * 
     * @type {number}
     * @memberof PatchedUpdateSelfProfile
     */
    'age'?: number;
    /**
     * 
     * @type {string}
     * @memberof PatchedUpdateSelfProfile
     */
    'icon_pass'?: string;
    /**
     * 
     * @type {string}
     * @memberof PatchedUpdateSelfProfile
     */
    'profile_message'?: string;
    /**
     * 
     * @type {string}
     * @memberof PatchedUpdateSelfProfile
     */
    'profile_user_id'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof PatchedUpdateSelfProfile
     */
    'profile_first_registed'?: boolean;
}
/**
 * 
 * @export
 * @interface Profile
 */
export interface Profile {
    /**
     * 
     * @type {User}
     * @memberof Profile
     */
    'user': User;
    /**
     * 
     * @type {string}
     * @memberof Profile
     */
    'gender'?: string;
    /**
     * 
     * @type {string}
     * @memberof Profile
     */
    'birth_date'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Profile
     */
    'location'?: string;
    /**
     * 
     * @type {number}
     * @memberof Profile
     */
    'age'?: number;
    /**
     * 
     * @type {string}
     * @memberof Profile
     */
    'icon_pass'?: string;
    /**
     * 
     * @type {string}
     * @memberof Profile
     */
    'profile_message'?: string;
    /**
     * 
     * @type {string}
     * @memberof Profile
     */
    'profile_user_id'?: string;
    /**
     * 
     * @type {number}
     * @memberof Profile
     */
    'follow_count'?: number;
    /**
     * 
     * @type {number}
     * @memberof Profile
     */
    'follower_count'?: number;
}
/**
 * 
 * @export
 * @interface SelfProfile
 */
export interface SelfProfile {
    /**
     * 
     * @type {number}
     * @memberof SelfProfile
     */
    'id': number;
    /**
     * 
     * @type {User}
     * @memberof SelfProfile
     */
    'user': User;
    /**
     * 
     * @type {string}
     * @memberof SelfProfile
     */
    'profile_user_id'?: string;
    /**
     * 
     * @type {SelfProfileStatusEnum}
     * @memberof SelfProfile
     */
    'status'?: SelfProfileStatusEnum;
    /**
     * 
     * @type {number}
     * @memberof SelfProfile
     */
    'age'?: number;
    /**
     * 
     * @type {string}
     * @memberof SelfProfile
     */
    'birth_date'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof SelfProfile
     */
    'follow_count'?: number;
    /**
     * 
     * @type {number}
     * @memberof SelfProfile
     */
    'follower_count'?: number;
    /**
     * 
     * @type {string}
     * @memberof SelfProfile
     */
    'gender'?: string;
    /**
     * 
     * @type {string}
     * @memberof SelfProfile
     */
    'icon_pass'?: string;
    /**
     * 
     * @type {string}
     * @memberof SelfProfile
     */
    'location'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof SelfProfile
     */
    'profile_first_registed'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof SelfProfile
     */
    'profile_message'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof SelfProfile
     */
    'sensitive_entry'?: boolean;
}
/**
 * 
 * @export
 * @enum {string}
 */

export enum SelfProfileStatusEnum {
    Close = 'close',
    Block = 'block',
    Public = 'public',
    Machine = 'machine',
    Official = 'official'
}

/**
 * 
 * @export
 * @interface UpdateSelfProfile
 */
export interface UpdateSelfProfile {
    /**
     * 
     * @type {string}
     * @memberof UpdateSelfProfile
     */
    'gender'?: string;
    /**
     * 
     * @type {string}
     * @memberof UpdateSelfProfile
     */
    'birth_date'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof UpdateSelfProfile
     */
    'location'?: string;
    /**
     * 
     * @type {number}
     * @memberof UpdateSelfProfile
     */
    'age'?: number;
    /**
     * 
     * @type {string}
     * @memberof UpdateSelfProfile
     */
    'icon_pass'?: string;
    /**
     * 
     * @type {string}
     * @memberof UpdateSelfProfile
     */
    'profile_message'?: string;
    /**
     * 
     * @type {string}
     * @memberof UpdateSelfProfile
     */
    'profile_user_id'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof UpdateSelfProfile
     */
    'profile_first_registed'?: boolean;
}
/**
 * 
 * @export
 * @interface User
 */
export interface User {
    /**
     * 
     * @type {number}
     * @memberof User
     */
    'id': number;
    /**
     * この項目は必須です。半角アルファベット、半角数字、@/./+/-/_ で150文字以下にしてください。
     * @type {string}
     * @memberof User
     */
    'username': string;
}

/**
 * ApiApi - axios parameter creator
 * @export
 */
export const ApiApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {Entry} entry 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCreateEntryCreate: async (entry: Entry, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'entry' is not null or undefined
            assertParamExists('apiCreateEntryCreate', 'entry', entry)
            const localVarPath = `/api/create/entry/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication cookieAuth required

            // authentication jwtAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(entry, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiEntriesList: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/entries/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication cookieAuth required

            // authentication jwtAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiFollowsList: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/follows/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication cookieAuth required

            // authentication jwtAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} user 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiProfileRetrieve: async (user: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'user' is not null or undefined
            assertParamExists('apiProfileRetrieve', 'user', user)
            const localVarPath = `/api/profile/{user}/`
                .replace(`{${"user"}}`, encodeURIComponent(String(user)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication cookieAuth required

            // authentication jwtAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * OpenApi3 schema for this API. Format can be selected via content negotiation.  - YAML: application/vnd.oai.openapi - JSON: application/vnd.oai.openapi+json
         * @param {'json' | 'yaml'} [format] 
         * @param {'af' | 'ar' | 'ar-dz' | 'ast' | 'az' | 'be' | 'bg' | 'bn' | 'br' | 'bs' | 'ca' | 'cs' | 'cy' | 'da' | 'de' | 'dsb' | 'el' | 'en' | 'en-au' | 'en-gb' | 'eo' | 'es' | 'es-ar' | 'es-co' | 'es-mx' | 'es-ni' | 'es-ve' | 'et' | 'eu' | 'fa' | 'fi' | 'fr' | 'fy' | 'ga' | 'gd' | 'gl' | 'he' | 'hi' | 'hr' | 'hsb' | 'hu' | 'hy' | 'ia' | 'id' | 'ig' | 'io' | 'is' | 'it' | 'ja' | 'ka' | 'kab' | 'kk' | 'km' | 'kn' | 'ko' | 'ky' | 'lb' | 'lt' | 'lv' | 'mk' | 'ml' | 'mn' | 'mr' | 'my' | 'nb' | 'ne' | 'nl' | 'nn' | 'os' | 'pa' | 'pl' | 'pt' | 'pt-br' | 'ro' | 'ru' | 'sk' | 'sl' | 'sq' | 'sr' | 'sr-latn' | 'sv' | 'sw' | 'ta' | 'te' | 'tg' | 'th' | 'tk' | 'tr' | 'tt' | 'udm' | 'uk' | 'ur' | 'uz' | 'vi' | 'zh-hans' | 'zh-hant'} [lang] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiSchemaRetrieve: async (format?: 'json' | 'yaml', lang?: 'af' | 'ar' | 'ar-dz' | 'ast' | 'az' | 'be' | 'bg' | 'bn' | 'br' | 'bs' | 'ca' | 'cs' | 'cy' | 'da' | 'de' | 'dsb' | 'el' | 'en' | 'en-au' | 'en-gb' | 'eo' | 'es' | 'es-ar' | 'es-co' | 'es-mx' | 'es-ni' | 'es-ve' | 'et' | 'eu' | 'fa' | 'fi' | 'fr' | 'fy' | 'ga' | 'gd' | 'gl' | 'he' | 'hi' | 'hr' | 'hsb' | 'hu' | 'hy' | 'ia' | 'id' | 'ig' | 'io' | 'is' | 'it' | 'ja' | 'ka' | 'kab' | 'kk' | 'km' | 'kn' | 'ko' | 'ky' | 'lb' | 'lt' | 'lv' | 'mk' | 'ml' | 'mn' | 'mr' | 'my' | 'nb' | 'ne' | 'nl' | 'nn' | 'os' | 'pa' | 'pl' | 'pt' | 'pt-br' | 'ro' | 'ru' | 'sk' | 'sl' | 'sq' | 'sr' | 'sr-latn' | 'sv' | 'sw' | 'ta' | 'te' | 'tg' | 'th' | 'tk' | 'tr' | 'tt' | 'udm' | 'uk' | 'ur' | 'uz' | 'vi' | 'zh-hans' | 'zh-hant', options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/schema/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication cookieAuth required

            // authentication jwtAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (format !== undefined) {
                localVarQueryParameter['format'] = format;
            }

            if (lang !== undefined) {
                localVarQueryParameter['lang'] = lang;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} user 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiSelfprofileRetrieve: async (user: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'user' is not null or undefined
            assertParamExists('apiSelfprofileRetrieve', 'user', user)
            const localVarPath = `/api/selfprofile/{user}/`
                .replace(`{${"user"}}`, encodeURIComponent(String(user)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication cookieAuth required

            // authentication jwtAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {PatchedUpdateSelfProfile} [patchedUpdateSelfProfile] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiUpdateSelfprofilePartialUpdate: async (id: number, patchedUpdateSelfProfile?: PatchedUpdateSelfProfile, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiUpdateSelfprofilePartialUpdate', 'id', id)
            const localVarPath = `/api/update/selfprofile/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication cookieAuth required

            // authentication jwtAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(patchedUpdateSelfProfile, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {UpdateSelfProfile} [updateSelfProfile] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiUpdateSelfprofileUpdate: async (id: number, updateSelfProfile?: UpdateSelfProfile, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiUpdateSelfprofileUpdate', 'id', id)
            const localVarPath = `/api/update/selfprofile/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication cookieAuth required

            // authentication jwtAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateSelfProfile, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiUserRetrieve: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiUserRetrieve', 'id', id)
            const localVarPath = `/api/user/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication cookieAuth required

            // authentication jwtAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ApiApi - functional programming interface
 * @export
 */
export const ApiApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ApiApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {Entry} entry 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiCreateEntryCreate(entry: Entry, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Entry>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiCreateEntryCreate(entry, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiEntriesList(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Entry>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiEntriesList(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiFollowsList(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Follow>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiFollowsList(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} user 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiProfileRetrieve(user: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Profile>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiProfileRetrieve(user, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * OpenApi3 schema for this API. Format can be selected via content negotiation.  - YAML: application/vnd.oai.openapi - JSON: application/vnd.oai.openapi+json
         * @param {'json' | 'yaml'} [format] 
         * @param {'af' | 'ar' | 'ar-dz' | 'ast' | 'az' | 'be' | 'bg' | 'bn' | 'br' | 'bs' | 'ca' | 'cs' | 'cy' | 'da' | 'de' | 'dsb' | 'el' | 'en' | 'en-au' | 'en-gb' | 'eo' | 'es' | 'es-ar' | 'es-co' | 'es-mx' | 'es-ni' | 'es-ve' | 'et' | 'eu' | 'fa' | 'fi' | 'fr' | 'fy' | 'ga' | 'gd' | 'gl' | 'he' | 'hi' | 'hr' | 'hsb' | 'hu' | 'hy' | 'ia' | 'id' | 'ig' | 'io' | 'is' | 'it' | 'ja' | 'ka' | 'kab' | 'kk' | 'km' | 'kn' | 'ko' | 'ky' | 'lb' | 'lt' | 'lv' | 'mk' | 'ml' | 'mn' | 'mr' | 'my' | 'nb' | 'ne' | 'nl' | 'nn' | 'os' | 'pa' | 'pl' | 'pt' | 'pt-br' | 'ro' | 'ru' | 'sk' | 'sl' | 'sq' | 'sr' | 'sr-latn' | 'sv' | 'sw' | 'ta' | 'te' | 'tg' | 'th' | 'tk' | 'tr' | 'tt' | 'udm' | 'uk' | 'ur' | 'uz' | 'vi' | 'zh-hans' | 'zh-hant'} [lang] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiSchemaRetrieve(format?: 'json' | 'yaml', lang?: 'af' | 'ar' | 'ar-dz' | 'ast' | 'az' | 'be' | 'bg' | 'bn' | 'br' | 'bs' | 'ca' | 'cs' | 'cy' | 'da' | 'de' | 'dsb' | 'el' | 'en' | 'en-au' | 'en-gb' | 'eo' | 'es' | 'es-ar' | 'es-co' | 'es-mx' | 'es-ni' | 'es-ve' | 'et' | 'eu' | 'fa' | 'fi' | 'fr' | 'fy' | 'ga' | 'gd' | 'gl' | 'he' | 'hi' | 'hr' | 'hsb' | 'hu' | 'hy' | 'ia' | 'id' | 'ig' | 'io' | 'is' | 'it' | 'ja' | 'ka' | 'kab' | 'kk' | 'km' | 'kn' | 'ko' | 'ky' | 'lb' | 'lt' | 'lv' | 'mk' | 'ml' | 'mn' | 'mr' | 'my' | 'nb' | 'ne' | 'nl' | 'nn' | 'os' | 'pa' | 'pl' | 'pt' | 'pt-br' | 'ro' | 'ru' | 'sk' | 'sl' | 'sq' | 'sr' | 'sr-latn' | 'sv' | 'sw' | 'ta' | 'te' | 'tg' | 'th' | 'tk' | 'tr' | 'tt' | 'udm' | 'uk' | 'ur' | 'uz' | 'vi' | 'zh-hans' | 'zh-hant', options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<{ [key: string]: any; }>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiSchemaRetrieve(format, lang, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} user 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiSelfprofileRetrieve(user: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SelfProfile>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiSelfprofileRetrieve(user, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {PatchedUpdateSelfProfile} [patchedUpdateSelfProfile] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiUpdateSelfprofilePartialUpdate(id: number, patchedUpdateSelfProfile?: PatchedUpdateSelfProfile, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UpdateSelfProfile>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiUpdateSelfprofilePartialUpdate(id, patchedUpdateSelfProfile, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {UpdateSelfProfile} [updateSelfProfile] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiUpdateSelfprofileUpdate(id: number, updateSelfProfile?: UpdateSelfProfile, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UpdateSelfProfile>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiUpdateSelfprofileUpdate(id, updateSelfProfile, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiUserRetrieve(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<User>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiUserRetrieve(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ApiApi - factory interface
 * @export
 */
export const ApiApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ApiApiFp(configuration)
    return {
        /**
         * 
         * @param {Entry} entry 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCreateEntryCreate(entry: Entry, options?: any): AxiosPromise<Entry> {
            return localVarFp.apiCreateEntryCreate(entry, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiEntriesList(options?: any): AxiosPromise<Array<Entry>> {
            return localVarFp.apiEntriesList(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiFollowsList(options?: any): AxiosPromise<Array<Follow>> {
            return localVarFp.apiFollowsList(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} user 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiProfileRetrieve(user: number, options?: any): AxiosPromise<Profile> {
            return localVarFp.apiProfileRetrieve(user, options).then((request) => request(axios, basePath));
        },
        /**
         * OpenApi3 schema for this API. Format can be selected via content negotiation.  - YAML: application/vnd.oai.openapi - JSON: application/vnd.oai.openapi+json
         * @param {'json' | 'yaml'} [format] 
         * @param {'af' | 'ar' | 'ar-dz' | 'ast' | 'az' | 'be' | 'bg' | 'bn' | 'br' | 'bs' | 'ca' | 'cs' | 'cy' | 'da' | 'de' | 'dsb' | 'el' | 'en' | 'en-au' | 'en-gb' | 'eo' | 'es' | 'es-ar' | 'es-co' | 'es-mx' | 'es-ni' | 'es-ve' | 'et' | 'eu' | 'fa' | 'fi' | 'fr' | 'fy' | 'ga' | 'gd' | 'gl' | 'he' | 'hi' | 'hr' | 'hsb' | 'hu' | 'hy' | 'ia' | 'id' | 'ig' | 'io' | 'is' | 'it' | 'ja' | 'ka' | 'kab' | 'kk' | 'km' | 'kn' | 'ko' | 'ky' | 'lb' | 'lt' | 'lv' | 'mk' | 'ml' | 'mn' | 'mr' | 'my' | 'nb' | 'ne' | 'nl' | 'nn' | 'os' | 'pa' | 'pl' | 'pt' | 'pt-br' | 'ro' | 'ru' | 'sk' | 'sl' | 'sq' | 'sr' | 'sr-latn' | 'sv' | 'sw' | 'ta' | 'te' | 'tg' | 'th' | 'tk' | 'tr' | 'tt' | 'udm' | 'uk' | 'ur' | 'uz' | 'vi' | 'zh-hans' | 'zh-hant'} [lang] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiSchemaRetrieve(format?: 'json' | 'yaml', lang?: 'af' | 'ar' | 'ar-dz' | 'ast' | 'az' | 'be' | 'bg' | 'bn' | 'br' | 'bs' | 'ca' | 'cs' | 'cy' | 'da' | 'de' | 'dsb' | 'el' | 'en' | 'en-au' | 'en-gb' | 'eo' | 'es' | 'es-ar' | 'es-co' | 'es-mx' | 'es-ni' | 'es-ve' | 'et' | 'eu' | 'fa' | 'fi' | 'fr' | 'fy' | 'ga' | 'gd' | 'gl' | 'he' | 'hi' | 'hr' | 'hsb' | 'hu' | 'hy' | 'ia' | 'id' | 'ig' | 'io' | 'is' | 'it' | 'ja' | 'ka' | 'kab' | 'kk' | 'km' | 'kn' | 'ko' | 'ky' | 'lb' | 'lt' | 'lv' | 'mk' | 'ml' | 'mn' | 'mr' | 'my' | 'nb' | 'ne' | 'nl' | 'nn' | 'os' | 'pa' | 'pl' | 'pt' | 'pt-br' | 'ro' | 'ru' | 'sk' | 'sl' | 'sq' | 'sr' | 'sr-latn' | 'sv' | 'sw' | 'ta' | 'te' | 'tg' | 'th' | 'tk' | 'tr' | 'tt' | 'udm' | 'uk' | 'ur' | 'uz' | 'vi' | 'zh-hans' | 'zh-hant', options?: any): AxiosPromise<{ [key: string]: any; }> {
            return localVarFp.apiSchemaRetrieve(format, lang, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} user 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiSelfprofileRetrieve(user: number, options?: any): AxiosPromise<SelfProfile> {
            return localVarFp.apiSelfprofileRetrieve(user, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {PatchedUpdateSelfProfile} [patchedUpdateSelfProfile] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiUpdateSelfprofilePartialUpdate(id: number, patchedUpdateSelfProfile?: PatchedUpdateSelfProfile, options?: any): AxiosPromise<UpdateSelfProfile> {
            return localVarFp.apiUpdateSelfprofilePartialUpdate(id, patchedUpdateSelfProfile, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {UpdateSelfProfile} [updateSelfProfile] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiUpdateSelfprofileUpdate(id: number, updateSelfProfile?: UpdateSelfProfile, options?: any): AxiosPromise<UpdateSelfProfile> {
            return localVarFp.apiUpdateSelfprofileUpdate(id, updateSelfProfile, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiUserRetrieve(id: number, options?: any): AxiosPromise<User> {
            return localVarFp.apiUserRetrieve(id, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ApiApi - object-oriented interface
 * @export
 * @class ApiApi
 * @extends {BaseAPI}
 */
export class ApiApi extends BaseAPI {
    /**
     * 
     * @param {Entry} entry 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ApiApi
     */
    public apiCreateEntryCreate(entry: Entry, options?: AxiosRequestConfig) {
        return ApiApiFp(this.configuration).apiCreateEntryCreate(entry, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ApiApi
     */
    public apiEntriesList(options?: AxiosRequestConfig) {
        return ApiApiFp(this.configuration).apiEntriesList(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ApiApi
     */
    public apiFollowsList(options?: AxiosRequestConfig) {
        return ApiApiFp(this.configuration).apiFollowsList(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} user 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ApiApi
     */
    public apiProfileRetrieve(user: number, options?: AxiosRequestConfig) {
        return ApiApiFp(this.configuration).apiProfileRetrieve(user, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * OpenApi3 schema for this API. Format can be selected via content negotiation.  - YAML: application/vnd.oai.openapi - JSON: application/vnd.oai.openapi+json
     * @param {'json' | 'yaml'} [format] 
     * @param {'af' | 'ar' | 'ar-dz' | 'ast' | 'az' | 'be' | 'bg' | 'bn' | 'br' | 'bs' | 'ca' | 'cs' | 'cy' | 'da' | 'de' | 'dsb' | 'el' | 'en' | 'en-au' | 'en-gb' | 'eo' | 'es' | 'es-ar' | 'es-co' | 'es-mx' | 'es-ni' | 'es-ve' | 'et' | 'eu' | 'fa' | 'fi' | 'fr' | 'fy' | 'ga' | 'gd' | 'gl' | 'he' | 'hi' | 'hr' | 'hsb' | 'hu' | 'hy' | 'ia' | 'id' | 'ig' | 'io' | 'is' | 'it' | 'ja' | 'ka' | 'kab' | 'kk' | 'km' | 'kn' | 'ko' | 'ky' | 'lb' | 'lt' | 'lv' | 'mk' | 'ml' | 'mn' | 'mr' | 'my' | 'nb' | 'ne' | 'nl' | 'nn' | 'os' | 'pa' | 'pl' | 'pt' | 'pt-br' | 'ro' | 'ru' | 'sk' | 'sl' | 'sq' | 'sr' | 'sr-latn' | 'sv' | 'sw' | 'ta' | 'te' | 'tg' | 'th' | 'tk' | 'tr' | 'tt' | 'udm' | 'uk' | 'ur' | 'uz' | 'vi' | 'zh-hans' | 'zh-hant'} [lang] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ApiApi
     */
    public apiSchemaRetrieve(format?: 'json' | 'yaml', lang?: 'af' | 'ar' | 'ar-dz' | 'ast' | 'az' | 'be' | 'bg' | 'bn' | 'br' | 'bs' | 'ca' | 'cs' | 'cy' | 'da' | 'de' | 'dsb' | 'el' | 'en' | 'en-au' | 'en-gb' | 'eo' | 'es' | 'es-ar' | 'es-co' | 'es-mx' | 'es-ni' | 'es-ve' | 'et' | 'eu' | 'fa' | 'fi' | 'fr' | 'fy' | 'ga' | 'gd' | 'gl' | 'he' | 'hi' | 'hr' | 'hsb' | 'hu' | 'hy' | 'ia' | 'id' | 'ig' | 'io' | 'is' | 'it' | 'ja' | 'ka' | 'kab' | 'kk' | 'km' | 'kn' | 'ko' | 'ky' | 'lb' | 'lt' | 'lv' | 'mk' | 'ml' | 'mn' | 'mr' | 'my' | 'nb' | 'ne' | 'nl' | 'nn' | 'os' | 'pa' | 'pl' | 'pt' | 'pt-br' | 'ro' | 'ru' | 'sk' | 'sl' | 'sq' | 'sr' | 'sr-latn' | 'sv' | 'sw' | 'ta' | 'te' | 'tg' | 'th' | 'tk' | 'tr' | 'tt' | 'udm' | 'uk' | 'ur' | 'uz' | 'vi' | 'zh-hans' | 'zh-hant', options?: AxiosRequestConfig) {
        return ApiApiFp(this.configuration).apiSchemaRetrieve(format, lang, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} user 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ApiApi
     */
    public apiSelfprofileRetrieve(user: number, options?: AxiosRequestConfig) {
        return ApiApiFp(this.configuration).apiSelfprofileRetrieve(user, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {PatchedUpdateSelfProfile} [patchedUpdateSelfProfile] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ApiApi
     */
    public apiUpdateSelfprofilePartialUpdate(id: number, patchedUpdateSelfProfile?: PatchedUpdateSelfProfile, options?: AxiosRequestConfig) {
        return ApiApiFp(this.configuration).apiUpdateSelfprofilePartialUpdate(id, patchedUpdateSelfProfile, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {UpdateSelfProfile} [updateSelfProfile] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ApiApi
     */
    public apiUpdateSelfprofileUpdate(id: number, updateSelfProfile?: UpdateSelfProfile, options?: AxiosRequestConfig) {
        return ApiApiFp(this.configuration).apiUpdateSelfprofileUpdate(id, updateSelfProfile, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ApiApi
     */
    public apiUserRetrieve(id: number, options?: AxiosRequestConfig) {
        return ApiApiFp(this.configuration).apiUserRetrieve(id, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * AuthApi - axios parameter creator
 * @export
 */
export const AuthApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * API View that receives a POST with a user\'s username and password.  Returns a JSON Web Token that can be used for authenticated requests.
         * @param {JSONWebToken} jSONWebToken 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authCreate: async (jSONWebToken: JSONWebToken, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'jSONWebToken' is not null or undefined
            assertParamExists('authCreate', 'jSONWebToken', jSONWebToken)
            const localVarPath = `/auth/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(jSONWebToken, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AuthApi - functional programming interface
 * @export
 */
export const AuthApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AuthApiAxiosParamCreator(configuration)
    return {
        /**
         * API View that receives a POST with a user\'s username and password.  Returns a JSON Web Token that can be used for authenticated requests.
         * @param {JSONWebToken} jSONWebToken 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async authCreate(jSONWebToken: JSONWebToken, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<JSONWebToken>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.authCreate(jSONWebToken, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * AuthApi - factory interface
 * @export
 */
export const AuthApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AuthApiFp(configuration)
    return {
        /**
         * API View that receives a POST with a user\'s username and password.  Returns a JSON Web Token that can be used for authenticated requests.
         * @param {JSONWebToken} jSONWebToken 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authCreate(jSONWebToken: JSONWebToken, options?: any): AxiosPromise<JSONWebToken> {
            return localVarFp.authCreate(jSONWebToken, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * AuthApi - object-oriented interface
 * @export
 * @class AuthApi
 * @extends {BaseAPI}
 */
export class AuthApi extends BaseAPI {
    /**
     * API View that receives a POST with a user\'s username and password.  Returns a JSON Web Token that can be used for authenticated requests.
     * @param {JSONWebToken} jSONWebToken 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public authCreate(jSONWebToken: JSONWebToken, options?: AxiosRequestConfig) {
        return AuthApiFp(this.configuration).authCreate(jSONWebToken, options).then((request) => request(this.axios, this.basePath));
    }
}


